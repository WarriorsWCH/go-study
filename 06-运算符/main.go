
package main 

import (
	"fmt"
)

func main() {
	// 运算的数都是整数，最后值也是整数
	fmt.Println(5/4)//1

	var n1 float32 = 5 /4
	fmt.Println(n1)//1

	// 需要保留小数
	var n2 float32 = 5.0 /4
	fmt.Println(n2)//1.25

	var n3 int = 10 % 3
	fmt.Println(n3)

	// 返回值的正负取决于第一个操作数的正负
	var n4 int = 10 % -3
	fmt.Println(n4)//1

	var n5 int = 5
	n5++
	fmt.Println(n5)
	// 算术运算符的注意事项
	// 对于除号/,他的整数除和小数除是有区别的，整数之间做除法时，只保留整数部分而舍弃小数部分
	// 对一个数取模时，可以等价 a%b = a - a/b*b,这样我们可以看到驱魔的一个本质运算
	// go的自增自减只能独立使用
	// go的++和--只能卸载变量的后面，不能卸载变量前面
	// go的设计者去掉c/java中的自增自减的容易混淆的写法，让go更加简洁统一



	// 关系运算符
	// 关系运算符的结果都是bool型
	// 关系表达式经常用在if结构的条件中或者循环结构的条件中

	var flag bool
	flag = 5 > 4
	fmt.Println(flag)

	// 逻辑运算符
	var age int = 40
	if (age < 50 || age > 30) {
		fmt.Println("lalala")
	}

	// &&也叫短路与：如果第一个条件为false，则第二个条件不会判断，最终结果为false
	// ||也叫短路或：如果第一个条件为true，则第二个条件不会判断，最终结果为true




	// 位运算符
	// &按位与运算符是双目运算符，功能是对参与运算的两个数进行二进制位与
	// |按位或运算符是双目运算符，高性能是对参与的两个数进行二进制位或
	// ^按位异或运算符是双目运算符，功能是对参与运算的两个数进行二进制位相异或，当二进制位不同时结果为1否则为0
	// <<左移运算符是双目运算符，其功能是把"<<"左边的运算数的各二进制位全部左移若干位，高位丢弃，低位补0，左移n为就是乘以2的n次方
	// >>右移运算符是双目运算符，其功能是把">>"右边的运算数的各二进制位全部右移若干位，右移n位就是除以2的n次方


	// 其他运算符
	// & 返回变量的存储地址
	// * 指着变量


	// 有两个变量，a和b，要求将其进行交换。但不允许使用中间变量，最终打印结果
	var a int = 1
	var b int = 2

	a = a + b
	b = a - b
	a = a - b
	fmt.Println("a=",a,"b=",b)
}











